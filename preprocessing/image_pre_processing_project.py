# -*- coding: utf-8 -*-
"""image-pre-processing project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aYK3EhpUR-03RphQCak2YRRXcxy7xF11
"""

# Commented out IPython magic to ensure Python compatibility.
import os
import numpy as np
import pandas as pd

import cv2 
import random as rn
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

from tqdm import tqdm
from sklearn.preprocessing import LabelEncoder

from keras import backend as K
from keras.models import Sequential
from keras.layers import Dense
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.utils import to_categorical

from sklearn.model_selection import train_test_split
# %matplotlib inline

from google.colab import drive
drive.mount('/content/drive')

import os
os.environ['KAGGLE_CONFIG_DIR'] = "/content/drive/MyDrive/Colab Notebooks/Semester 7/Pembelajaran Mesin/Project Akhir"

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/Colab Notebooks/Semester 7/Pembelajaran Mesin/Project Akhir
!ls -a

!kaggle datasets download -d alxmamaev/flowers-recognition

!unzip "/content/drive/MyDrive/Colab Notebooks/Semester 7/Pembelajaran Mesin/Project Akhir/flowers-recognition.zip" -d "/content/drive/MyDrive/Colab Notebooks/Semester 7/Pembelajaran Mesin/Project Akhir"

"""## PIL Image
Untuk melihat jumlah gambar yang ada
"""

from PIL import Image, ImageOps, ImageFilter

train_dir = "/content/drive/MyDrive/Colab Notebooks/Semester 7/Pembelajaran Mesin/Project Akhir/flowers"
classes = os.listdir(train_dir)
classes = sorted(classes)
nclasses = len(classes)
classes

for _class in classes:
    print('{} {} images'.format(_class, len(os.listdir(os.path.join(train_dir, _class)))))

other_extensions = [".db", ".pyc", ".py"]
def open_images_pil(path, classes, dim=32):
    
    xall = []
    yall = []
    label = 0
    j = 0

    for cl in classes:
        clsdir = os.path.join(path, cl)
        for imgname in os.listdir(clsdir):
            bad_ext_found = 0
            for other_ext in other_extensions:
                if imgname.endswith(other_ext):
                    bad_ext_found = 1
                    break
            if not bad_ext_found:
                print("Opening files in {}: {}".format(cl, str(j + 1)), end="\r")
                imgpath = os.path.join(clsdir, imgname)

                #open and pre-process images
                img = Image.open(imgpath)
                img = ImageOps.fit(img, (dim, dim), Image.ANTIALIAS).convert('RGB')
                
                xall.append(img)  # Get image 
                yall.append(label)  # Get image label (folder name)
                j += 1

        j = 0
        label += 1
        print()

    n = len(xall)
    print("{} images in set".format(n))
    return xall, yall

xall, yall = open_images_pil(train_dir, classes, 256)

img = xall[0]
img

X=[]
Z=[]
IMG_SIZE=150
FLOWER_DAISY_DIR='/content/drive/MyDrive/Colab Notebooks/Semester 7/Pembelajaran Mesin/Project Akhir/flowers/daisy'
FLOWER_SUNFLOWER_DIR='/content/drive/MyDrive/Colab Notebooks/Semester 7/Pembelajaran Mesin/Project Akhir/flowers/sunflower'
FLOWER_TULIP_DIR='/content/drive/MyDrive/Colab Notebooks/Semester 7/Pembelajaran Mesin/Project Akhir/flowers/tulip'
FLOWER_DANDI_DIR='/content/drive/MyDrive/Colab Notebooks/Semester 7/Pembelajaran Mesin/Project Akhir/flowers/dandelion'
FLOWER_ROSE_DIR='/content/drive/MyDrive/Colab Notebooks/Semester 7/Pembelajaran Mesin/Project Akhir/flowers/rose'

def assign_label(img,flower_type):
    return flower_type

def make_train_data(flower_type,DIR):
    for img in tqdm(os.listdir(DIR)):
        label=assign_label(img,flower_type)
        path = os.path.join(DIR,img)
        img = cv2.imread(path,cv2.IMREAD_COLOR)
        img = cv2.resize(img, (IMG_SIZE,IMG_SIZE))
        
        X.append(np.array(img))
        Z.append(str(label))

make_train_data('Daisy',FLOWER_DAISY_DIR)
print(len(X))

make_train_data('Sunflower',FLOWER_SUNFLOWER_DIR)
print(len(X))

make_train_data('Tulip',FLOWER_TULIP_DIR)
print(len(X))

make_train_data('Dandelion',FLOWER_DANDI_DIR)
print(len(X))

make_train_data('Rose',FLOWER_ROSE_DIR)
print(len(X))

fig,ax=plt.subplots(5,2)
fig.set_size_inches(15,15)
for i in range(5):
    for j in range (2):
        l=rn.randint(0,len(Z))
        ax[i,j].imshow(X[l])
        ax[i,j].set_title('Flower: '+Z[l])
        
plt.tight_layout()

le=LabelEncoder()
Y=le.fit_transform(Z)
Y=to_categorical(Y,5)
X=np.array(X)
X=X/255

x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.20,random_state=42)

print("Train Data = ", x_train.shape)
print("Train Label = ", x_test.shape)
print("Validation Data = ", y_train.shape)
print("Validation Label = ", y_test.shape)